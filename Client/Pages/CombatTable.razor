@page "/CombatResultTable/{page}/{key}/"
@using BlazorApp.Shared
@inject HttpClient httpClient

@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(keysSorted != null)
    {        
        <dl>
            <dt>Creature:</dt>
            <dd>@key</dd>
            <dt>Started at:</dt>
            <dd>@result.FightStart.ToString("F")</dd>
            <dt>Ended at:</dt>
            <dd>@result.FightEnd.ToString("F")</dd>
        </dl>

        <table class="table">
            <thead>
                <tr>
                    <th>Player</th>
				    <th>Hits</th>
				    <th>Times Hit</th>
				    <th>Times Stunned</th>
				    <th>Times Thrown</th>
				    <th>Knocks Over</th>
				    <th>Biggest Hit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (string vkey in keysSorted)
                {
                    <tr>
                        <td>@vkey</td>
                        @if(key == vkey)
                        {
                            <td>@(GetCombatResultData(vkey)?.Hits ?? 0)</td>
                            <td>@(GetCombatResultData(vkey)?.TimesHit ?? 0)</td>
                            <td>@(GetCombatResultData(vkey)?.TimesStunned ?? 0)</td>
                            <td>@(GetCombatResultData(vkey)?.TimesThrown ?? 0)</td>
                            <td>@(GetCombatResultData(vkey)?.KnocksOver ?? 0)</td>
                            <td>@(GetCombatResultData(vkey)?.BiggestHit ?? "")</td>
                        }
                        else
                        {
                            <td>@(GetAttackerVictimCombatResult(vkey, key)?.Hits ?? 0)</td>
                            <td>@(GetAttackerVictimCombatResult(key, vkey)?.Hits ?? 0)</td>
                            <td>@(GetCombatResultData(vkey)?.TimesStunned ?? 0)</td>
                            <td>@(GetCombatResultData(vkey)?.TimesThrown ?? 0)</td>
                            <td>@(GetAttackerVictimCombatResult(vkey, key)?.KnocksOver ?? 0)</td>
                            <td>@(GetAttackerVictimCombatResult(vkey, key)?.BiggestHit ?? "")</td>
                        }
                    </tr>
                }
        </tbody>
        </table>
    }
    else
    {
        <p><em>Invalid Creature</em></p>
    }
}

@code {
    [Parameter]
    public string page { get; set; }
    [Parameter]
    public string key { get; set; }

    private CombatResults result;
    private IEnumerable<string> keysSorted;

    protected override async Task OnInitializedAsync()
    {
        result = await httpClient.GetFromJsonAsync<CombatResults>($"/api/CombatResults/{page}");
        if(result.CombatResultsDict.Keys.Contains(key))
        {
            keysSorted = result.CombatResultsDict.OrderByDescending(kv => kv.Value.Hits).Select(kv => kv.Key).ToList();
        }
    }

    private CreatureCombatResult GetCombatResultData(string creature)
    {
        if(result == null)
        {
            return null;
        }

        if (!result.CombatResultsDict.ContainsKey(creature))
        {
            return null;
        }

        return result.CombatResultsDict[creature];
    }

    private AttackerVictimCombatResult GetAttackerVictimCombatResult(string attacker, string victim)
    {
        var data = GetCombatResultData(attacker);
        if(attacker == null)
        {
            return null;
        }

        if (!data.Attacks.ContainsKey(victim))
        {
            return null;
        }

        return data.Attacks[victim];
    }
}

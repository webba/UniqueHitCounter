@page "/CombatResultTable/{page}/{key}/"
@using Blazm.Components
@using BlazorApp.Shared
@using BlazorApp.Shared.ViewModels
@using System.ComponentModel
@inject HttpClient httpClient

@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(keysSorted != null)
    {        
        <dl>
            <dt>Creature:</dt>
            <dd>@key</dd>
            <dt>Started at:</dt>
            <dd>@GetFightStartString()</dd>
            <dt>Ended at:</dt>
            <dd>@GetFightEndString()</dd>
        </dl>
        <BlazmGrid Data="@tableData" Sortable="true" SortField="@nameof(TableResultsData.Hits)" SortDirection="ListSortDirection.Descending">
            <GridColumns>
                <GridColumn Field="@nameof(TableResultsData.CreatureName)"/>
                <GridColumn Field="@nameof(TableResultsData.Hits)"/>
                <GridColumn Field="@nameof(TableResultsData.TimesHit)"/>
                <GridColumn Field="@nameof(TableResultsData.TimesStunned)"/>
                <GridColumn Field="@nameof(TableResultsData.TimesThrown)"/>
                <GridColumn Field="@nameof(TableResultsData.KnocksSenseless)"/>
                <GridColumn Field="@nameof(TableResultsData.BiggestHit)"/>
            </GridColumns>
        </BlazmGrid>
    }
    else
    {
        <p><em>Invalid Creature</em></p>
    }
}

@code {
    [Parameter]
    public string page { get; set; }
    [Parameter]
    public string key { get; set; }

    private CombatResults result;
    private IEnumerable<string> keysSorted;
    private IList<TableResultsData> tableData;

    protected override async Task OnInitializedAsync()
    {
        result = await httpClient.GetFromJsonAsync<CombatResults>($"/api/CombatResults/{page}");
        if(result.CombatResultsDict.Keys.Contains(key))
        {
            keysSorted = result.CombatResultsDict.OrderByDescending(kv => kv.Value.Hits).Select(kv => kv.Key).ToList();
            tableData = new List<TableResultsData>();
            foreach(var creature in result.CombatResultsDict.Keys)
            {
                if(key == creature)
                {
                    tableData.Add(new TableResultsData()
                        {
                            CreatureName = creature,
                            Hits = GetCombatResultData(creature)?.Hits ?? 0,
                            TimesHit = GetCombatResultData(creature)?.TimesHit ?? 0,
                            TimesStunned = GetCombatResultData(creature)?.TimesStunned ?? 0,
                            TimesThrown = GetCombatResultData(creature)?.TimesThrown ?? 0,
                            KnocksSenseless = GetCombatResultData(creature)?.KnocksOver ?? 0,
                            BiggestHit = GetCombatResultData(creature)?.BiggestHit ?? ""
                        });
                }
                else
                {
                    tableData.Add(new TableResultsData()
                        {
                            CreatureName = creature,
                            Hits = GetAttackerVictimCombatResult(creature, key)?.Hits ?? 0,
                            TimesHit = GetAttackerVictimCombatResult(key, creature)?.Hits ?? 0,
                            TimesStunned = GetCombatResultData(creature)?.TimesStunned ?? 0,
                            TimesThrown = GetCombatResultData(creature)?.TimesThrown ?? 0,
                            KnocksSenseless = GetAttackerVictimCombatResult(creature, key)?.KnocksOver ?? 0,
                            BiggestHit = GetAttackerVictimCombatResult(creature, key)?.BiggestHit ?? ""
                        });
                }
            }
        }
    }

    private string GetFightStartString()
    {
        var creatureData = GetCombatResultData(key);
        if(creatureData == null || creatureData.FirstTime == null)
        {
            return result.FightStart.ToString("F");
        }
        return creatureData.FirstTime?.ToString("F") ?? "";
    }

    private string GetFightEndString()
    {
        var creatureData = GetCombatResultData(key);
        if(creatureData == null || creatureData.LastTime == null)
        {
            return result.FightEnd.ToString("F");
        }
        return creatureData.LastTime?.ToString("F") ?? "";
    }

    private CreatureCombatResult GetCombatResultData(string creature)
    {
        if(result == null)
        {
            return null;
        }

        if (!result.CombatResultsDict.ContainsKey(creature))
        {
            return null;
        }

        return result.CombatResultsDict[creature];
    }

    private AttackerVictimCombatResult GetAttackerVictimCombatResult(string attacker, string victim)
    {
        var data = GetCombatResultData(attacker);
        if(attacker == null)
        {
            return null;
        }

        if (!data.Attacks.ContainsKey(victim))
        {
            return null;
        }

        return data.Attacks[victim];
    }
}

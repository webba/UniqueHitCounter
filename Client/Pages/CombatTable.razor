@page "/CombatResultTable/{page}/{key}/"
@using BlazorApp.Shared
@using BlazorApp.Shared.ViewModels
@using System.ComponentModel
@inject HttpClient httpClient

@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(tableData != null)
    {        
        <dl>
            <dt>Creature:</dt>
            <dd>@key</dd>
            <dt>Started at:</dt>
            <dd>@GetFightStartString()</dd>
            <dt>Ended at:</dt>
            <dd>@GetFightEndString()</dd>
        </dl>
        <DataGrid TItem="TableResultsData"
            Data="@tableData"
            ShowPager="true"
            PageSize="500"
            Responsive>
            <DataGridColumn TItem="TableResultsData" Field="@nameof(TableResultsData.CreatureName)" 
                Caption="@TableResultsData.DisplayCreatureName" Sortable="true">
                    <DisplayTemplate>
                        <NavLink href="@string.Format("/CombatResultTable/{0}/{1}", page, context.CreatureName)">@context.CreatureName</NavLink>
                    </DisplayTemplate>
                </DataGridColumn>
            <DataGridColumn TItem="TableResultsData" Field="@nameof(TableResultsData.Hits)" 
                Caption="@TableResultsData.DisplayHits" Sortable="true" SortDirection="Blazorise.SortDirection.Descending"></DataGridColumn>
            <DataGridColumn TItem="TableResultsData" Field="@nameof(TableResultsData.TimesHit)" 
                Caption="@TableResultsData.DisplayTimesHit" Sortable="true"></DataGridColumn>
            <DataGridColumn TItem="TableResultsData" Field="@nameof(TableResultsData.TimesStunned)" 
                Caption="@TableResultsData.DisplayTimesStunned" Sortable="true"></DataGridColumn>
            <DataGridColumn TItem="TableResultsData" Field="@nameof(TableResultsData.TimesThrown)" 
                Caption="@TableResultsData.DisplayTimesThrown" Sortable="true"></DataGridColumn>
            <DataGridColumn TItem="TableResultsData" Field="@nameof(TableResultsData.KnocksSenseless)" 
                Caption="@TableResultsData.DisplayKnocksSenseless" Sortable="true"></DataGridColumn>
            <DataGridColumn TItem="TableResultsData" Field="@nameof(TableResultsData.BiggestHit)" 
                Caption="@TableResultsData.DisplayBiggestHit" Sortable="true"></DataGridColumn>
        </DataGrid>
    }
    else
    {
        <p><em>Invalid Creature</em></p>
    }
}

@code {
    [Parameter]
    public string page { get; set; }
    [Parameter]
    public string key { get; set; }

    private CombatResults result;
    private IList<TableResultsData> tableData;

    protected override async Task OnInitializedAsync()
    {
        result = await httpClient.GetFromJsonAsync<CombatResults>($"/api/CombatResults/{page}");
        if(result.CombatResultsDict.Keys.Contains(key))
        {
            tableData = new List<TableResultsData>();
            foreach(var creature in result.CombatResultsDict.Keys)
            {
                if(key == creature)
                {
                    tableData.Add(new TableResultsData()
                        {
                            CreatureName = creature,
                            Hits = result.GetCombatResultData(creature)?.Hits ?? 0,
                            TimesHit = result.GetCombatResultData(creature)?.TimesHit ?? 0,
                            TimesStunned = result.GetCombatResultData(creature)?.TimesStunned ?? 0,
                            TimesThrown = result.GetCombatResultData(creature)?.TimesThrown ?? 0,
                            KnocksSenseless = result.GetCombatResultData(creature)?.KnocksOver ?? 0,
                            BiggestHit = result.GetCombatResultData(creature)?.BiggestHit ?? ""
                        });
                }
                else
                {
                    tableData.Add(new TableResultsData()
                        {
                            CreatureName = creature,
                            Hits = result.GetAttackerVictimCombatResult(creature, key)?.Hits ?? 0,
                            TimesHit = result.GetAttackerVictimCombatResult(key, creature)?.Hits ?? 0,
                            TimesStunned = result.GetCombatResultData(creature)?.TimesStunned ?? 0,
                            TimesThrown = result.GetCombatResultData(creature)?.TimesThrown ?? 0,
                            KnocksSenseless = result.GetAttackerVictimCombatResult(creature, key)?.KnocksOver ?? 0,
                            BiggestHit = result.GetAttackerVictimCombatResult(creature, key)?.BiggestHit ?? ""
                        });
                }
            }
        }
    }

    private string GetFightStartString()
    {
        var creatureData = result.GetCombatResultData(key);
        if(creatureData == null || creatureData.FirstTime == null)
        {
            return result.FightStart.ToString("F");
        }
        return creatureData.FirstTime?.ToString("F") ?? "";
    }

    private string GetFightEndString()
    {
        var creatureData = result.GetCombatResultData(key);
        if(creatureData == null || creatureData.LastTime == null)
        {
            return result.FightEnd.ToString("F");
        }
        return creatureData.LastTime?.ToString("F") ?? "";
    }
}
